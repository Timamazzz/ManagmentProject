from calendar import monthrange
from datetime import date, datetime

import openpyxl
from django.contrib.auth.models import AbstractUser
from django.core.files.base import ContentFile
from django.db import models
from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _
from django_jsonform.models.fields import JSONField
from django.db import transaction


# Create your models here.
class User(AbstractUser):
    pass


class Volunteer(models.Model):
    STATUS_CHOICES = [
        ('active', '–ê–∫—Ç–∏–≤–µ–Ω'),
        ('dismissed', '–£–≤–æ–ª–µ–Ω'),
        ('reserve', '–†–µ–∑–µ—Ä–≤'),
    ]
    number_service = models.IntegerField(verbose_name="–ù–æ–º–µ—Ä —Ç–∞–±–µ–ª—å–Ω—ã–π")

    first_name = models.CharField(max_length=30, verbose_name="–ò–º—è")
    last_name = models.CharField(max_length=30, verbose_name="–§–∞–º–∏–ª–∏—è")
    patronymic = models.CharField(max_length=30, blank=True, null=True, verbose_name="–û—Ç—á–µ—Å—Ç–≤–æ")

    birthday = models.DateField(verbose_name="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")

    passport_series = models.CharField(max_length=10, verbose_name="–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞")
    passport_number = models.CharField(max_length=15, verbose_name="–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞")
    passport_issued = models.CharField(max_length=255, verbose_name="–ö–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç")
    passport_issue_date = models.DateField(verbose_name="–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞")

    contract_date = models.DateField(verbose_name="–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
    order_number = models.CharField(max_length=50, verbose_name="–ù–æ–º–µ—Ä –ø—Ä–∏–∫–∞–∑–∞")
    enrollment_date = models.DateField(verbose_name="–î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ –¥–æ–±—Ä–æ–≤–æ–ª—å—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ")

    salary_amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–†–∞–∑–º–µ—Ä –¥–µ–Ω–µ–∂–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã",
                                        default=0.00)

    bic = models.CharField(max_length=9, verbose_name="–ë–ò–ö", null=True, blank=True)
    bank_name = models.CharField(max_length=255, verbose_name="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", null=True,
                                 blank=True)
    correspondent_account = models.CharField(max_length=20, verbose_name="–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç", null=True,
                                             blank=True)
    checking_account = models.CharField(max_length=20, verbose_name="–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç", null=True, blank=True)
    inn = models.CharField(max_length=12, verbose_name="–ò–ù–ù", null=True, blank=True)
    kpp = models.CharField(max_length=9, verbose_name="–ö–ü–ü", null=True, blank=True)

    dismissal_date = models.DateField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è")
    dismissal_order_number = models.CharField(max_length=50, blank=True, null=True,
                                              verbose_name="–ù–æ–º–µ—Ä –ø—Ä–∏–∫–∞–∑–∞ –æ–± —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏")

    rank = models.CharField(max_length=1024, verbose_name="–ó–≤–∞–Ω–∏–µ", blank=True, null=True)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='active', verbose_name="–°—Ç–∞—Ç—É—Å")

    class Meta:
        verbose_name = "–î–æ–±—Ä–æ–≤–æ–ª–µ—Ü"
        verbose_name_plural = "–î–æ–±—Ä–æ–≤–æ–ª—å—Ü—ã"
        permissions = [
            ("can_manage_reserve", "–ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∑–µ—Ä–≤–∏—Å—Ç–∞–º–∏"),
        ]

    def __str__(self):
        return f"{self.last_name} {self.first_name} ({self.number_service})"

    def clean(self):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–∞"""
        if self.status == 'dismissed':
            if not self.dismissal_date:
                raise ValidationError({
                    'dismissal_date': _("–ü—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —É–≤–æ–ª—å–Ω–µ–Ω–∏—è!")
                })
            if not self.dismissal_order_number:
                raise ValidationError({
                    'dismissal_order_number': _("–ü—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–∏–∫–∞–∑–∞!")
                })
            if self.dismissal_date and self.enrollment_date and self.dismissal_date < self.enrollment_date:
                raise ValidationError({
                    'dismissal_date': _("–î–∞—Ç–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω–∏—è!")
                })

    def save(self, *args, **kwargs):
        self.full_clean()
        super().save(*args, **kwargs)


class Remark(models.Model):
    volunteer = models.ForeignKey(Volunteer, on_delete=models.CASCADE, related_name="remarks",
                                  verbose_name="–î–æ–±—Ä–æ–≤–æ–ª–µ—Ü")
    date = models.DateField(verbose_name="–î–∞—Ç–∞ –Ω–∞—Ä–µ–∫–∞–Ω–∏—è")
    comment = models.TextField(blank=True, null=True, verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–∞—Ä–µ–∫–∞–Ω–∏—é")

    class Meta:
        verbose_name = "–ù–∞—Ä–µ–∫–∞–Ω–∏–µ"
        verbose_name_plural = "–ù–∞—Ä–µ–∫–∞–Ω–∏—è"

    def __str__(self):
        return f"–ù–∞—Ä–µ–∫–∞–Ω–∏–µ {self.volunteer.last_name} {self.volunteer.first_name} ({self.date})"


class Item(models.Model):
    CHARACTERISTICS_SCHEMA = {
        'type': 'list',
        'items': {
            'type': 'dict',
            'keys': {
                'name': {
                    'type': 'string',
                    'title': '–ù–∞–∑–≤–∞–Ω–∏–µ'
                },
                'value': {
                    'type': 'string',
                    'title': '–ó–Ω–∞—á–µ–Ω–∏–µ'
                }
            }
        }
    }
    """–ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
    description = models.TextField(blank=True, null=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    characteristics = JSONField(blank=True, null=True, verbose_name='–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', schema=CHARACTERISTICS_SCHEMA)

    class Meta:
        verbose_name = "–ü—Ä–µ–¥–º–µ—Ç"
        verbose_name_plural = "–ü—Ä–µ–¥–º–µ—Ç—ã"

    def __str__(self):
        return self.name


class VolunteerItem(models.Model):
    """–°–≤—è–∑—å –º–µ–∂–¥—É –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–µ–º –∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏"""
    volunteer = models.ForeignKey(Volunteer, on_delete=models.CASCADE, related_name="items", verbose_name="–î–æ–±—Ä–æ–≤–æ–ª–µ—Ü")
    item = models.ForeignKey(Item, on_delete=models.CASCADE, related_name="volunteers", verbose_name="–ü—Ä–µ–¥–º–µ—Ç")
    quantity = models.PositiveIntegerField(verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")

    class Meta:
        verbose_name = "–ü—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–∞"
        verbose_name_plural = "–ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–µ–≤"
        unique_together = (
            'volunteer',
            'item')

    def __str__(self):
        return f"{self.volunteer} - {self.item.name} (–ö–æ–ª-–≤–æ: {self.quantity})"


class Report(models.Model):
    """–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
    file = models.FileField(upload_to="reports/", blank=True, null=True, verbose_name="–§–∞–π–ª –æ—Ç—á–µ—Ç–∞")
    year = models.IntegerField(verbose_name="–ì–æ–¥", default=date.today().year)
    month = models.IntegerField(verbose_name="–ú–µ—Å—è—Ü", choices=[(i, month) for i, month in enumerate([
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ], start=1)], default=date.today().month)

    class Meta:
        verbose_name = "–û—Ç—á–µ—Ç"
        verbose_name_plural = "–û—Ç—á–µ—Ç—ã"

    def __str__(self):
        start_date = self.get_start_date()
        end_date = self.get_end_date()
        return f"–û—Ç—á–µ—Ç —Å {start_date} –ø–æ {end_date}"

    def get_start_date(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞"""
        return date(self.year, self.month, 1)

    def get_end_date(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞"""
        last_day = monthrange(self.year, self.month)[1]
        return date(self.year, self.month, last_day)

    def get_volunteers_for_report(self):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–µ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
        start_date = self.get_start_date()
        end_date = self.get_end_date()

        # –ò—Å–∫–ª—é—á–∞–µ–º —É–≤–æ–ª–µ–Ω–Ω—ã—Ö –¥–æ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        queryset = Volunteer.objects.exclude(dismissal_date__isnull=False, dismissal_date__lte=start_date)
        print(f"üë• –í–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É–≤–æ–ª–µ–Ω–Ω—ã—Ö –¥–æ {start_date}: {queryset.count()}")

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –∑–∞—á–∏—Å–ª–µ–Ω –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
        queryset = queryset.filter(enrollment_date__lte=end_date)
        print(f"üë• –í–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ enrollment_date__lte={end_date}: {queryset.count()}")

        # –ò—Å–∫–ª—é—á–∞–µ–º –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
        queryset = queryset.exclude(remarks__date__range=(start_date, end_date))
        print(f"üë• –í–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∑–∞–º–µ—á–∞–Ω–∏—è–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ({start_date}, {end_date}): {queryset.count()}")

        return queryset

    def get_worked_days(self, volunteer):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π"""
        start_date = self.get_start_date()
        end_date = self.get_end_date()

        active_start = max(start_date, volunteer.enrollment_date)
        active_end = min(end_date, volunteer.dismissal_date) if volunteer.dismissal_date else end_date

        worked_days = (active_end - active_start).days + 1 if active_start <= active_end else 0

        print(f"üë§ –í–æ–ª–æ–Ω—Ç–µ—Ä {volunteer.number_service}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞: {start_date} - {end_date}")
        print(f"üìÖ –î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: {volunteer.enrollment_date}")
        print(f"üìÖ –î–∞—Ç–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è: {volunteer.dismissal_date or '‚ùå –Ω–µ —É–≤–æ–ª–µ–Ω'}")
        print(f"üìÜ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–Ω–∏: {worked_days}")

        return worked_days

    def generate_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞"""
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–û—Ç—á–µ—Ç"

        headers = [
            "id", "‚Ññ —Ç–∞–±–µ–ª—å–Ω—ã–π", "–°—Ç–∞—Ç—É—Å", "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ",
            "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞", "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞", "–ö–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç",
            "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞", "–î–∞—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", "‚Ññ –ø—Ä–∏–∫–∞–∑–∞", "–î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è",
            "–†–∞–∑–º–µ—Ä –¥–µ–Ω–µ–∂–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã", "–ë–ò–ö", "–ë–∞–Ω–∫", "–ö–æ—Ä—Ä. —Å—á–µ—Ç", "–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç", "–ò–ù–ù", "–ö–ü–ü",
            "–ö–æ–ª-–≤–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π"
        ]
        ws.append(headers)

        for volunteer in self.get_volunteers_for_report():
            row = [
                volunteer.id, volunteer.number_service, volunteer.get_status_display(),
                volunteer.last_name, volunteer.first_name, volunteer.patronymic,
                volunteer.birthday, volunteer.passport_series, volunteer.passport_number, volunteer.passport_issued,
                volunteer.passport_issue_date, volunteer.contract_date, volunteer.order_number,
                volunteer.enrollment_date, volunteer.salary_amount, volunteer.bic, volunteer.bank_name,
                volunteer.correspondent_account, volunteer.checking_account, volunteer.inn, volunteer.kpp,
                self.get_worked_days(volunteer)
            ]
            ws.append(row)

        file_stream = ContentFile(b"")
        wb.save(file_stream)
        file_stream.seek(0)
        filename = f"report_{self.year}_{self.month}.xlsx"
        self.file.save(filename, file_stream, save=False)

    def save(self, *args, **kwargs):
        self.generate_report()
        super().save(*args, **kwargs)

    @property
    def name(self):
        return self.__str__()

    name.fget.short_description = '–ù–∞–∑–≤–∞–Ω–∏–µ'


class ActivityReport(models.Model):
    """–û—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–µ–≤"""
    STATUS_CHOICES = [
        ('pending', '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏'),
        ('processing', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'),
        ('failed', '–û—à–∏–±–∫–∞')
    ]
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
    report_date = models.DateField(verbose_name="–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    file = models.FileField(upload_to="activity_reports/", verbose_name="–§–∞–π–ª –æ—Ç—á–µ—Ç–∞")
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending', verbose_name="–°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞")
    error_details = models.TextField(verbose_name="–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏", blank=True, null=True)  # –ù–æ–≤–æ–µ –ø–æ–ª–µ

    class Meta:
        verbose_name = "–û—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        verbose_name_plural = "–û—Ç—á–µ—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"

    def __str__(self):
        return f"–û—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ({self.report_date.strftime('%Y-%m-%d')})"

    def clean(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è: —Ñ–∞–π–ª –∏ –¥–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"""
        if not self.file:
            raise ValidationError({"file": _("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞.")})
        if not self.report_date:
            raise ValidationError({"report_date": _("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")})

    def process_report(self):
        print(f"\n--- –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ—Ç {self.report_date} ---")
        self.error_details = ""  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        try:
            with transaction.atomic():
                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
                print("[1/5] –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ Excel...")
                wb = openpyxl.load_workbook(self.file, data_only=True)
                ws = wb.active

                # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–∞ —Å —Ç–∞–±–µ–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
                print("[2/5] –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–∞ —Å —Ç–∞–±–µ–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏...")
                header_row = [str(cell.value).strip().lower() for cell in ws[1]]
                tn_col_index = next(
                    (idx for idx, h in enumerate(header_row)
                     if any(kw in h for kw in {"—Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä", "—Ç–Ω"})),
                    None
                )

                if tn_col_index is None:
                    self.error_details = "‚ùå –°—Ç–æ–ª–±–µ—Ü —Å —Ç–∞–±–µ–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
                    self.status = 'failed'
                    self.save(update_fields=['status', 'error_details'])
                    raise ValueError(self.error_details)

                print(f"‚úîÔ∏è –¢–∞–±–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ {chr(65 + tn_col_index)}")

                # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
                print("[3/5] –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞...")
                report_tn = set()
                invalid_tn = []
                for row_num, row in enumerate(ws.iter_rows(min_row=7, values_only=True), start=7):
                    tn = str(row[tn_col_index]).strip()
                    if tn.isdigit():
                        report_tn.add(int(tn))
                    else:
                        invalid_tn.append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: {tn}")

                if invalid_tn:
                    self.error_details = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∞–±–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(invalid_tn)
                    self.status = 'failed'
                    self.save(update_fields=['status', 'error_details'])
                    raise ValueError(self.error_details)

                print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ: {len(report_tn)}")

                # –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
                print("[4/5] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤...")
                active_volunteers = Volunteer.objects.filter(status='active')
                dismissed = []

                for volunteer in active_volunteers:
                    if volunteer.number_service not in report_tn:
                        volunteer.status = 'dismissed'
                        volunteer.dismissal_date = self.report_date
                        volunteer.dismissal_order_number = f"–ê–≤—Ç–æ—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ {self.report_date}"
                        dismissed.append(volunteer)

                if dismissed:
                    Volunteer.objects.bulk_update(dismissed, ['status', 'dismissal_date', 'dismissal_order_number'])
                    print(f"üö´ –£–≤–æ–ª–µ–Ω–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: {len(dismissed)}")
                else:
                    print("ü§∑ –ù–µ—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –¥–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è")

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
                print("[5/5] –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤...")
                existing_numbers = set(Volunteer.objects.values_list('number_service', flat=True))
                new_numbers = report_tn - existing_numbers

                new_volunteers = []
                errors = []
                if new_numbers:
                    for row_num, row in enumerate(ws.iter_rows(min_row=7, values_only=True), start=7):
                        tn = str(row[tn_col_index]).strip()
                        if tn.isdigit() and int(tn) in new_numbers:
                            try:
                                print(f"\n--- –°—Ç—Ä–æ–∫–∞ {row_num} ---")
                                print(f"–¢–ù: {tn}")
                                print(f"–§–∞–º–∏–ª–∏—è (row[10]): {row[10]}")
                                print(f"–ò–º—è (row[11]): {row[11]}")
                                print(f"–û—Ç—á–µ—Å—Ç–≤–æ (row[12]): {row[12]}")
                                print(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (row[14]): {row[14]}")
                                print(f"–ü–∞—Å–ø–æ—Ä—Ç (—Å–µ—Ä–∏—è: row[36]={row[36]}, –Ω–æ–º–µ—Ä: row[37]={row[37]})")
                                print(f"–ö–µ–º –≤—ã–¥–∞–Ω (row[39]): {row[39]}")
                                print(f"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞ (row[38]): {row[38]}")
                                print(f"–î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ (row[82]): {row[82]}")
                                print(f"–ù–æ–º–µ—Ä –ø—Ä–∏–∫–∞–∑–∞ (row[81]): {row[81]}")
                                print(f"–î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è (row[84]): {row[84]}")
                                print(f"–ë–ò–ö (row[52]): {row[52]}")
                                print(f"–ò–ù–ù (row[48]): {row[48]}")
                                print(f"–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç (row[53]): {row[53]}")
                                print(f"–ó–≤–∞–Ω–∏–µ (row[6]): {row[6]}")

                                # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                                def parse_date(date_str, field_name):
                                    if not date_str:
                                        return None
                                    if isinstance(date_str, datetime):  # –ï—Å–ª–∏ —É–∂–µ datetime, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–∞—Ç—É
                                        return date_str.date()
                                    if isinstance(date_str, date):  # –ï—Å–ª–∏ —É–∂–µ date, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                        return date_str
                                    try:
                                        return datetime.strptime(date_str, "%d.%m.%Y").date()
                                    except ValueError:
                                        errors.append(
                                            f"–°—Ç—Ä–æ–∫–∞ {row_num}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç {field_name} ('{date_str}')")
                                        return None

                                birthday = parse_date(row[14], "–¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è")
                                passport_issue_date = parse_date(row[38], "–¥–∞—Ç—ã –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞")
                                contract_date = parse_date(row[82], "–¥–∞—Ç—ã –¥–æ–≥–æ–≤–æ—Ä–∞")
                                enrollment_date = parse_date(row[84], "–¥–∞—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω–∏—è")

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                                if errors and len(errors) >= 5:  # –ü—Ä–∏–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                                    raise ValueError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö")

                                new_volunteers.append(Volunteer(
                                    number_service=int(tn),
                                    last_name=row[10],
                                    first_name=row[11],
                                    patronymic=row[12],
                                    birthday=birthday,
                                    passport_series=row[36],
                                    passport_number=row[37],
                                    passport_issued=row[39],
                                    passport_issue_date=passport_issue_date,
                                    contract_date=contract_date,
                                    order_number=row[81],
                                    enrollment_date=enrollment_date,
                                    bic=row[52],
                                    inn=row[48],
                                    checking_account=row[53],
                                    rank=row[6],
                                    status='active',
                                    salary_amount=0.00
                                ))
                            except Exception as e:
                                errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: {str(e)}")
                                continue

                    if errors:
                        self.error_details = "‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤:\n" + "\n".join(errors)
                        self.status = 'failed'
                        self.save(update_fields=['status', 'error_details'])
                        raise ValueError(self.error_details)

                    if new_volunteers:
                        Volunteer.objects.bulk_create(new_volunteers)
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤: {len(new_volunteers)}")
                    else:
                        self.error_details = "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏"
                        self.status = 'failed'
                        self.save(update_fields=['status', 'error_details'])
                        raise ValueError(self.error_details)
                else:
                    print("ü§∑ –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

                # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ
                self.status = 'completed'
                self.error_details = ""

        except Exception as e:
            print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            self.status = 'failed'
            if not self.error_details:  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ —Ä–∞–Ω–µ–µ
                self.error_details = str(e)
        finally:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            try:
                with transaction.atomic():
                    self.save(update_fields=['status', 'error_details'])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

        print("--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---\n")

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        if self.status == 'pending':  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            self.process_report()
